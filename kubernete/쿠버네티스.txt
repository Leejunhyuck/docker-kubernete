//대쉬보드 설치
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml

kubectl get pod --namespace=kube-system -l k8s-app=kubernetes-dashboard

NAME                                    READY   STATUS    RESTARTS   AGE
kubernetes-dashboard-54f679684c-nr2q5   1/1     Running   0          58s

kubectl proxy
Starting to serve on 127.0.0.1:8001

//결과 확인
http://localhost:8001/api/vi/namespaces/kube-system/services/https:kubernetesdashboard:/proxy/

쿠버네티스 클러스터(사진)
클러스터 전체를 관리하는 서버인 마스터가 적어도 하나 이상 있어야 한다. 쿠버네티스 클러스터는 마스터와 노드의 그룹으로 나뉜다.
    kube-apiserver 쿠버네티스 api를 노출하는 컴포넌트 kubectl로부터 리소스를 조작하라는 지시를 받는다.
    etcd 고가용성을 갖춘 분산 키-값 스토어 쿠버네티스 클러스터의 백킹 스토어로 쓰인다.
    kube-scheduler 노드를 모니터링하고 컨테이너를 배치할 적절한 노드를 선택한다
    kube-contoller-manager 리소스를 제어하는 컨트롤러를 실행한다.

네임스페이스
    클러스터 안에 가상 클러스터를 또 다시 만들 수 있다.
    이를 네임스페이스라고 한다.
    kubectl get namespace 로 확인 가능 (처음 클러스터를 구축하면 네임스페이스 4개가 이미 만들어져 있다.)
    네임스페이스는 개발팀이 일정 규모 이상일 때 유용하다. 개발자마자 자신만의 네임스페이스를 두면 메인 네임스페이스가 어질러지는 것을 방지할 수 있다.

파드(사진)
    파드는 컨테이너가 모인 집합체의 단위 이다.
    kubectl get pod

레플리카세트
    레플리카세트는 똑같은 정의를 갖는 파드를 여러 개 생성하고 관리하기 위한 리소스다.

디플로이먼트
    레플리카세트보다 상위에 해당하는 리소스로 디플로이먼트가 있다. 리플로이먼트는 애플리케이션 배포의 기본 단위가 되는 리소스다.
    디플로이먼트는 레프리카세트를 관리하고 다루기 위한 리소스다.
    --record 어떤 kubectl 명령을 실행했는지 기록을 남기는 옵션 
    kubectl get pod,replicaset,deployment --selector app=echo
    kubectl rollout history deployment echo => 리비전을 revison=1 확인가능

    * 레플리카세트의 생애주기
        - 파드 개수만 수정 하면 레플리카세트가 새로 생성되지 않음 
        - 컨테이너 저의 수정하면 레플리카 세트가 새로 생성되고 revison=2가 생성된다.
        - 롤백 실행하기 
            kubectl rollout history deployment echo --revision=1
            kubectl rollout undo deployment echo

서비스 
    쿠버네티스 클러스터 안에서 파드의 집합(주로 레플리카세트)에 대한 결로나 서비스 디스커버리를 제공하는 리소스다.
    apiVersion: v1
     - 요청이 들어오면 서비스에서 받아서 pod로 넘겨줌 
     kubectl get svc echo

     쿠버네티스의 클러스터는 dns 서비스를 서비스명.네임스페이스명.svc.local로 연결해준다. (서비스명 빼고는 생략가능)
     crul http://echo

     ClursterIP 서비스
        쿠버네티스 클러스터의 내부 아이피 주소에 서비스를 공개할 수 있다. 이를 이용해 어떤 파드에서 다른 파드 그룹으로 접근할 때 서비스를 거쳐 가도록 할수 있지만,
        외부로부터는 접근 할 수 없다. 
     
     NodePort 서비스
        클러스터 외부에서 접근 할 수 있는 서비스다.
        각 노드에서 서비스 포트로 접속 하기 위한 글로벌 포트를 개방한다는 점이 차이점이다.

     로드밸런서 서비스
        로컬 쿠버네티스 환경에서는 사용할 수 없는 서비스다.
    
     ExternalName 서비스
        셀렉터도 포트 정의도 없는 상당히 특이한 서비스다. 외부 호스트를 네임 레졸루션하기 위한 별명을 제공한다.
    
인그레스
    NodePort서비스는 L4 레벨 까지만 다룰 수 있기때문에 HTTP/HTTPS처럼 경로를 기반으로 서비스를 전환하는 L7 레벨의 제어는 불가능하다.
    로컬 쿠버네티스 환경에서는 인그레스를 사용해 서비스를 노출 시킬수 없다.
    클러스터 외부에서 온 http 요청을 서비스로 라우팅 하기 위해 nginx_ingress_controller를 배포한다.
    
    kubectl apply -f `
    https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.16.2/deploy/mandatory.yaml

    kubectl apply -f `
    https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.16.2/deploy/provider/cloud-generic.yaml

    kubectl -n ingress-nginx get service,pod

freshpod로 이미지 업데이트 탐지하고 파드 자동 업데이트하기
    이미지가 업데이트 됐는지 탐지해 파드를 자동으로 다시 배포하는 도구다
    imagePullPolicy: IfNotPresent (전에 받아둔 이미지가 있으면 재사용)으로 설정해야 한다.

    이미지를 수정하기 전에 -w 옵션으로 파드의 실행 상태를 모니터링한다
    kubectl get pod -l app=nginx -w

kube-prompt 쿠버네티스 리소스를 다루기 위하여 편의성이 개선된 도구이다.

kubectl api-versions 각각 어떤 리소스가 api를 통해 지원되는지 알 수 있다.

